A critical task when we're working with agents is making sure that we can make their lives as easy as possible to focus on the reasoning component. Now if you think about it, we're asking AI agents to go and translate all kinds of high-level ideas into computation, into series of API calls for us to accomplish some goal, and the user may not even understand the APIs. They may phrase their task in some way that's really alien to the AI. So I want you to imagine for a second that I told you to take a test, and I gave you a test, and it could be on any topic under the sun that the user comes up with, but I want you to take the test and all your answers you have to output in JSON, right? It adds a little bit of complexity, right? If I just told you you had to, you know, in natural language give your answers and give them very cleanly in natural language, it would be easier than if I told you that every time you come up with a decision for an answer that you have to go and translate it also into JSON, and that's basically what we were doing with agents, is we're adding this complexity and we're layering it on. So when an agent is picking a tool, not only is it having to pick a tool and decide what arguments, but it's also having to think about how to translate it to JSON, and one of the things that we want to do is we want to try to, because we acknowledge the complexity of the reasoning that we're applying, I want to make sure that wherever possible we reduce the burden on the agent. Now we're gonna always have to deal with having it output things in a structured format, but we want to do our best to alleviate it from burdens of other things. Now what might be other things? Well, when we go and write all kinds of applications, we typically all have all kinds of accidental complexities, like if we're building tools, we want our tools to be really clean, right? If we build a tool to do something, we want the agent to just be able to use that tool and pass in the arguments that are directly relevant to the tool, but that's not what happens. Typically we have things, for example, when we have web applications, we'll have some requests come in, and then we need to get a session out of it, and now we got to go figure out, you know, how do we extract a session, and then we'll pass that session to something like, you know, we'll find some user data with that session, and we'll pass that data around, but every one of these things that we do adds complexity, right? And what we want to do is we want to make our tools as clean as possible so that the agent doesn't have to be exposed to all this complexity. So in order to do that, one of the things we need to do is thinking about how do we build our tools in a simple way that still makes them reusable and makes them able to, you know, take advantage of all these things like session IDs and other things that we're going to need, right? If our agent is handling a request from a particular user, it's going to need to know things like who that user is, it's probably going to need some type of credentials, it's probably going to need access to like some type of data storage, and all these components, and so what we want to do is we want to build a system to where we can weave those dependencies into our tools without having to expose the agent to them. So the agent is down here, and all it sees is a nice clean interface to the tool, and all this messy stuff gets injected behind the scenes through some type of dependency injection. Now this is really important. We do not want to write tools that have like 10 different parameters, many of which are just there to inject dependencies through to give it things like session IDs and other stuff. We want that stuff to be magically available in our tools to the agent so that it doesn't have to worry about passing it around and think of the mental complexity of, well I want to call this tool to schedule this meeting, but I also need to go and find the user's ID in that meeting system, and I also need to find their token, and I also need to find the URL of the dev version of that, and you add in all this complexity and add it making it, you know, pass all this additional information, and suddenly it becomes really complex for the agent to do its job. So a simple thing that we can use is to build our tools in a way that we can use dependency injection to hide all this extra complexity, all this accidental complexity from our agents so that they can more easily go and work with clean tool interface.